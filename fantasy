#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Oct  1 19:09:12 2019

@author: adriandoan
"""

import pandas as pd  
import numpy as np  
import matplotlib.pyplot as plt  
from sklearn.model_selection import train_test_split 
from sklearn import metrics
from IPython import get_ipython
from sklearn.linear_model import LassoCV
from sklearn.linear_model import ElasticNetCV
from sklearn.preprocessing import PolynomialFeatures
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
import os

get_ipython().run_line_magic('matplotlib', 'inline')

__location__ = os.path.realpath(
    os.path.join(os.getcwd(), os.path.dirname(__file__)))

#reads data from the csv
data = pd.read_csv(os.path.join(__location__, 'fantasy_football.csv'))

print (data.shape)
print (data.head())
print("\n")
enc = OneHotEncoder(handle_unknown='ignore')

cat_columns = ['l_pos18']

data = pd.get_dummies(data, prefix_sep="__",
                              columns=cat_columns)

cat_dummies = [col for col in data
               if "__" in col 
               and col.split("__")[0] in cat_columns]

data['PointsPerGame'] = data['l_points17']/data['l_gp17']

data['QBPassing'] = data['l_pos18__QB']*data['l_passyds17']*data['l_passtd17']**3

data.to_csv('pluspositions_data.csv')

print (cat_dummies)
print("\n")
#list of variables we are using
vals = ['l_gp18', 'PointsPerGame', 'l_owners17','l_project17', 'l_actual17', 'QBPassing', 'l_rushyds17', 'l_passint17', 'l_rushtd17', 'l_rush1st17', 'l_recepts17','l_recyds17','l_rectd17','l_rec1st17','l_returnyds17','l_returntd17','l_2pt17','l_fumble17','off_linefo18','off_linepff18','off_passydsg17','off_runydsg17','off_ptsg17','def_ydsg17','def_ptsg17']

#cat_dummies.remove('l_pos18__QB')

print (cat_dummies)
print("\n")

vals = vals + cat_dummies

#gets rid of rows which lack data in the variables we are using
ls = []
for i in range(len(vals)):
    st = data[vals[i]].isna()
    for j in range(len(st)):
        if(st[j] and (j not in ls)):
            ls.append(j)
data = data.drop(ls)

print (data.shape)
print (data.head())
print (vals)
print("\n")
data.to_csv('clean_data.csv')

X = data[vals].values
y = data['l_points18'].values

poly = PolynomialFeatures

#splits the data by .2 for test and .8 for training
train_X, test_X, train_y, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

#creates a regression with lasso regularization and k fold cross validation automatically using 
regressor = ElasticNetCV(n_alphas=1000, normalize=True, cv=5)
regressor.fit(train_X, train_y)

print(regressor.alpha_)
print("\n")
y_pred = regressor.predict(test_X)
y_pred_train = regressor.predict(train_X)

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df1 = df.head(20)
print(df1)
print("\n")
df1.plot(kind='bar',figsize=(10,8))
plt.grid(which='major', linestyle='-', linewidth='0.5', color='green')
plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')
plt.show()

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print("\n")
  
# evaluating the model on training dataset
rmse_train = np.sqrt(mean_squared_error(train_y, y_pred_train))
r2_train = r2_score(train_y, y_pred_train)
  
# evaluating the model on test dataset
rmse_test = np.sqrt(mean_squared_error(y_test, y_pred))
r2_test = r2_score(y_test, y_pred)
  
print("The model performance for the training set")
print("-------------------------------------------")
print("RMSE of training set is {}".format(rmse_train))
print("R2 score of training set is {}".format(r2_train))
print("\n")
print("The model performance for the test set")
print("-------------------------------------------")
print("RMSE of test set is {}".format(rmse_test))
print("R2 score of test set is {}".format(r2_test))
print("\n")
for i in range(len(vals)):
   print("{}\t\t{}".format(vals[i], regressor.coef_[i]))


#creates a list of variables with coefficients of zero   
ls_2 = []
for i in range(len(vals)):
   if regressor.coef_[i] == 0.0 or regressor.coef_[i] == -0.0:
       ls_2.append(vals[i])
print("\n")       
print ('old amount of variables:' + str(len(vals)))

#removes variables with coefficients of zero from the model       
for i in range(len(ls_2)):
    vals.remove(ls_2[i])
           
print('variables with coefficients of zero:' + str(ls_2))

print ('new amount of variables:' + str(len(vals)))
print("\n")
#rereads the csv file to reset the data
data = pd.read_csv(os.path.join(__location__, 'pluspositions_data.csv'))

print (data.shape)
print("\n")
#double checks to see if having less variables means we can include more players
ls_3 = []
for i in range(len(vals)):
    st = data[vals[i]].isna()
    for j in range(len(st)):
        if(st[j] and (j not in ls)):
            ls_3.append(j)
data = data.drop(ls)

print (data.shape)

print (vals)
print("\n")








def create_polynomial_regression_model(degree):
  "Creates a polynomial regression model for the given degree"
  
  poly_features = PolynomialFeatures(degree=degree)
  
  # transforms the existing features to higher degree features.
  X_train_poly = poly_features.fit_transform(train_X)
  
  # fit the transformed features to Linear Regression
  poly_model = regressor
  poly_model.fit(X_train_poly, train_y)
  
  # predicting on training data-set
  y_train_predicted = poly_model.predict(X_train_poly)
  
  # predicting on test data-set
  y_test_predict = poly_model.predict(poly_features.fit_transform(test_X))
  
  # evaluating the model on training dataset
  rmse_train = np.sqrt(mean_squared_error(train_y, y_train_predicted))
  r2_train = r2_score(train_y, y_train_predicted)
  
  # evaluating the model on test dataset
  rmse_test = np.sqrt(mean_squared_error(y_test, y_test_predict))
  r2_test = r2_score(y_test, y_test_predict)
  
  print("The model performance for the training set")
  print("-------------------------------------------")
  print("RMSE of training set is {}".format(rmse_train))
  print("R2 score of training set is {}".format(r2_train))
  
  print("\n")
  
  print("The model performance for the test set")
  print("-------------------------------------------")
  print("RMSE of test set is {}".format(rmse_test))
  print("R2 score of test set is {}".format(r2_test))
  
print (regressor.intercept_)
print (regressor.coef_)
  

  

  

  





















       
      
